/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
import {
  Route,
} from './components/Breadcrumb/type';
import {
  BtnType,
  ColAttrs,
  Color,
  Ellipsis,
  Gutter,
  IconTheme,
  Size,
  TypographyTheme,
} from './interface';

export namespace Components {
  interface MiAffix {
    /**
    * 距离窗口底部达到指定偏移量
    */
    'bottom': number;
    /**
    * 其他属性,如aria-无障碍属性等
    */
    'props': {[prop: string]: any};
    /**
    * 设置 Affix 需要监听其滚动事件的元素，值为一个返回对应 DOM 元素的函数
    */
    'target': ()=>HTMLElement|Window;
    /**
    * 距离窗口顶部达到指定偏移量
    */
    'top': number;
    'updatePosition': () => Promise<void>;
  }
  interface MiBreadcrumb {
    /**
    * 路由的参数
    */
    'params': Object;
    /**
    * 其他属性,如aria-无障碍属性等
    */
    'props': { [prop: string]: any };
    /**
    * 根据路由信息，自定义面包屑每一项
    */
    'renderItem'?: (route: Route, params: Object, routes: Array<Route>) => HTMLElement;
    /**
    * 路由栈信息
    */
    'routes': Array<Route>;
    /**
    * 分隔符自定义
    */
    'separator': String | HTMLElement;
  }
  interface MiBreadcrumbItem {
    '_separator': string;
    'handelClick': () => Promise<void>;
    /**
    * 链接的目的地
    */
    'href': string;
    /**
    * 其他属性,如aria-无障碍属性等
    */
    'props': { [prop: string]: any };
  }
  interface MiButton {
    /**
    * 按钮颜色，可选值见 colors
    */
    'color': Color;
    /**
    * 是否禁用按钮
    */
    'disabled': boolean;
    /**
    * 将按钮宽度调整为其父宽度
    */
    'full': boolean;
    /**
    * 点击跳转的地址，指定此属性 button 的行为和 a 链接一致
    */
    'href': string;
    /**
    * 设置 button 原生的 type 值，可选值请参考 HTML 标准
    */
    'htmlType': string;
    /**
    * 设置按钮载入状态
    */
    'loading': boolean;
    /**
    * 其他属性,如aria-无障碍属性等
    */
    'props': {[prop: string]: any};
    /**
    * 设置按钮形状
    */
    'shape': 'circle' | 'round';
    /**
    * 设置按钮大小，可选值为 small large 或者不设
    */
    'size': Size;
    /**
    * a 链接的 target 属性，href 存在时生效
    */
    'target': string;
    /**
    * 按钮类型
    */
    'variant': BtnType;
  }
  interface MiCol {
    'getAttrs': () => Promise<void>;
    /**
    * 栅格左侧的间隔格数，间隔内不可以有栅格
    */
    'offset': number;
    /**
    * 栅格顺序，flex 布局模式下有效
    */
    'order': string;
    /**
    * 其他属性,如aria-无障碍属性等
    */
    'props': {[prop: string]: any};
    /**
    * 栅格向左移动格数
    */
    'pull': number;
    /**
    * 栅格向右移动格数
    */
    'push': number;
    'resize': () => Promise<void>;
    /**
    * 响应式栅格，可为栅格数或一个包含其他属性的对象
    */
    'response': ColAttrs;
    /**
    * 栅格占位格数，为 0 时相当于 display: none
    */
    'span': number;
  }
  interface MiIcon {
    /**
    * Icon 名，支持远程svg icon和自定义svg dom
    */
    'icon': string | HTMLElement;
    /**
    * 是否图标进入即将可视化区域后加载
    */
    'lazy': boolean;
    /**
    * 其他属性,如aria-无障碍属性等
    */
    'props': {[prop: string]: any};
    /**
    * 设置图标的旋转动画
    */
    'spinner': boolean;
    /**
    * 设置图标的类型
    */
    'theme': IconTheme;
  }
  interface MiPagination {
    /**
    * 页码改变的回调，参数是改变后的页码及每页条数
    */
    'change': Function;
    /**
    * 当前页数
    */
    'current': number;
    /**
    * 默认当前页数
    */
    'defaultCurrent': number;
    /**
    * 默认的每页条数
    */
    'defaultPageSize': number;
    /**
    * 禁用分页
    */
    'disabled': boolean;
    /**
    * 只有一页时是否隐藏分页器
    */
    'hideOnSinglePage': boolean;
    /**
    * 组件布局，子组件名用逗号分隔
    */
    'layout': string;
    /**
    * 每页条数
    */
    'pageSize': number;
    /**
    * 指定每页可以显示多少条
    */
    'pageSizeOptions': Array<number>;
    /**
    * 其他属性,如aria-无障碍属性等
    */
    'props': {[prop: string]: any};
    /**
    * 用于自定义页码的结构
    */
    'renderItem': Function;
    /**
    * 当添加该属性时，显示为简单分页
    */
    'simple': boolean;
    /**
    * size	当为「small」时，是小尺寸分页
    */
    'size': string;
    /**
    * 数据总数
    */
    'total': number;
  }
  interface MiParagraph {
    /**
    * 自动溢出省略
    */
    'ellipsis': boolean | Ellipsis;
    /**
    * 其他属性,如aria-无障碍属性等
    */
    'props': {[prop: string]: any};
    'toggleExpand': () => Promise<void>;
  }
  interface MiRow {
    'getGutter': () => Promise<void>;
    /**
    * 栅格间隔，可以写成像素值或支持响应式的对象写法 { xs: 8, sm: 16, md: 24}
    */
    'gutter': number | Gutter;
    /**
    * 其他属性,如aria-无障碍属性等
    */
    'props': {[prop: string]: any};
    'renderChildNode': () => Promise<void>;
    'resize': () => Promise<void>;
  }
  interface MiText {
    /**
    * 其他属性,如aria-无障碍属性等
    */
    'props': {[prop: string]: any};
    /**
    * 排版文字的主题
    */
    'theme': TypographyTheme;
  }
  interface MiTitle {
    /**
    * 排版标题的级别
    */
    'lv': number;
    /**
    * 其他属性,如aria-无障碍属性等
    */
    'props': {[prop: string]: any};
  }
  interface MiTypography {
    /**
    * 排版文字的交互行为
    */
    'action': 'copyable' | 'editable';
    /**
    * 禁用文本
    */
    'disabled': boolean;
    /**
    * 其他属性,如aria-无障碍属性等
    */
    'props': {[prop: string]: any};
  }
  interface ResizeObserver {
    /**
    * 是否禁用
    */
    'disabled': boolean;
    /**
    * 重新计算元素宽高的回调
    */
    'resize': Function;
  }
  interface RippleEffect {
    /**
    * Adds the ripple effect to the parent element.
    */
    'addRipple': (x: number, y: number) => Promise<() => void>;
    /**
    * Sets the type of ripple-effect:  - `bounded`: the ripple effect expands from the user's click position - `unbounded`: the ripple effect expands from the center of the button and overflows the container.  NOTE: Surfaces for bounded ripples should have the overflow property set to hidden, while surfaces for unbounded ripples should have it set to visible.
    */
    'type': 'bounded' | 'unbounded';
  }
}

declare global {


  interface HTMLMiAffixElement extends Components.MiAffix, HTMLStencilElement {}
  var HTMLMiAffixElement: {
    prototype: HTMLMiAffixElement;
    new (): HTMLMiAffixElement;
  };

  interface HTMLMiBreadcrumbElement extends Components.MiBreadcrumb, HTMLStencilElement {}
  var HTMLMiBreadcrumbElement: {
    prototype: HTMLMiBreadcrumbElement;
    new (): HTMLMiBreadcrumbElement;
  };

  interface HTMLMiBreadcrumbItemElement extends Components.MiBreadcrumbItem, HTMLStencilElement {}
  var HTMLMiBreadcrumbItemElement: {
    prototype: HTMLMiBreadcrumbItemElement;
    new (): HTMLMiBreadcrumbItemElement;
  };

  interface HTMLMiButtonElement extends Components.MiButton, HTMLStencilElement {}
  var HTMLMiButtonElement: {
    prototype: HTMLMiButtonElement;
    new (): HTMLMiButtonElement;
  };

  interface HTMLMiColElement extends Components.MiCol, HTMLStencilElement {}
  var HTMLMiColElement: {
    prototype: HTMLMiColElement;
    new (): HTMLMiColElement;
  };

  interface HTMLMiIconElement extends Components.MiIcon, HTMLStencilElement {}
  var HTMLMiIconElement: {
    prototype: HTMLMiIconElement;
    new (): HTMLMiIconElement;
  };

  interface HTMLMiPaginationElement extends Components.MiPagination, HTMLStencilElement {}
  var HTMLMiPaginationElement: {
    prototype: HTMLMiPaginationElement;
    new (): HTMLMiPaginationElement;
  };

  interface HTMLMiParagraphElement extends Components.MiParagraph, HTMLStencilElement {}
  var HTMLMiParagraphElement: {
    prototype: HTMLMiParagraphElement;
    new (): HTMLMiParagraphElement;
  };

  interface HTMLMiRowElement extends Components.MiRow, HTMLStencilElement {}
  var HTMLMiRowElement: {
    prototype: HTMLMiRowElement;
    new (): HTMLMiRowElement;
  };

  interface HTMLMiTextElement extends Components.MiText, HTMLStencilElement {}
  var HTMLMiTextElement: {
    prototype: HTMLMiTextElement;
    new (): HTMLMiTextElement;
  };

  interface HTMLMiTitleElement extends Components.MiTitle, HTMLStencilElement {}
  var HTMLMiTitleElement: {
    prototype: HTMLMiTitleElement;
    new (): HTMLMiTitleElement;
  };

  interface HTMLMiTypographyElement extends Components.MiTypography, HTMLStencilElement {}
  var HTMLMiTypographyElement: {
    prototype: HTMLMiTypographyElement;
    new (): HTMLMiTypographyElement;
  };

  interface HTMLResizeObserverElement extends Components.ResizeObserver, HTMLStencilElement {}
  var HTMLResizeObserverElement: {
    prototype: HTMLResizeObserverElement;
    new (): HTMLResizeObserverElement;
  };

  interface HTMLRippleEffectElement extends Components.RippleEffect, HTMLStencilElement {}
  var HTMLRippleEffectElement: {
    prototype: HTMLRippleEffectElement;
    new (): HTMLRippleEffectElement;
  };
  interface HTMLElementTagNameMap {
    'mi-affix': HTMLMiAffixElement;
    'mi-breadcrumb': HTMLMiBreadcrumbElement;
    'mi-breadcrumb-item': HTMLMiBreadcrumbItemElement;
    'mi-button': HTMLMiButtonElement;
    'mi-col': HTMLMiColElement;
    'mi-icon': HTMLMiIconElement;
    'mi-pagination': HTMLMiPaginationElement;
    'mi-paragraph': HTMLMiParagraphElement;
    'mi-row': HTMLMiRowElement;
    'mi-text': HTMLMiTextElement;
    'mi-title': HTMLMiTitleElement;
    'mi-typography': HTMLMiTypographyElement;
    'resize-observer': HTMLResizeObserverElement;
    'ripple-effect': HTMLRippleEffectElement;
  }
}

declare namespace LocalJSX {
  interface MiAffix extends JSXBase.HTMLAttributes<HTMLMiAffixElement> {
    /**
    * 距离窗口底部达到指定偏移量
    */
    'bottom'?: number;
    'onChange'?: (event: CustomEvent<boolean>) => void;
    /**
    * 其他属性,如aria-无障碍属性等
    */
    'props'?: {[prop: string]: any};
    /**
    * 设置 Affix 需要监听其滚动事件的元素，值为一个返回对应 DOM 元素的函数
    */
    'target'?: ()=>HTMLElement|Window;
    /**
    * 距离窗口顶部达到指定偏移量
    */
    'top'?: number;
  }
  interface MiBreadcrumb extends JSXBase.HTMLAttributes<HTMLMiBreadcrumbElement> {
    /**
    * 路由的参数
    */
    'params'?: Object;
    /**
    * 其他属性,如aria-无障碍属性等
    */
    'props'?: { [prop: string]: any };
    /**
    * 根据路由信息，自定义面包屑每一项
    */
    'renderItem'?: (route: Route, params: Object, routes: Array<Route>) => HTMLElement;
    /**
    * 路由栈信息
    */
    'routes'?: Array<Route>;
    /**
    * 分隔符自定义
    */
    'separator'?: String | HTMLElement;
  }
  interface MiBreadcrumbItem extends JSXBase.HTMLAttributes<HTMLMiBreadcrumbItemElement> {
    '_separator'?: string;
    /**
    * 链接的目的地
    */
    'href'?: string;
    'onOnClick'?: (event: CustomEvent<Route>) => void;
    /**
    * 其他属性,如aria-无障碍属性等
    */
    'props'?: { [prop: string]: any };
  }
  interface MiButton extends JSXBase.HTMLAttributes<HTMLMiButtonElement> {
    /**
    * 按钮颜色，可选值见 colors
    */
    'color'?: Color;
    /**
    * 是否禁用按钮
    */
    'disabled'?: boolean;
    /**
    * 将按钮宽度调整为其父宽度
    */
    'full'?: boolean;
    /**
    * 点击跳转的地址，指定此属性 button 的行为和 a 链接一致
    */
    'href'?: string;
    /**
    * 设置 button 原生的 type 值，可选值请参考 HTML 标准
    */
    'htmlType'?: string;
    /**
    * 设置按钮载入状态
    */
    'loading'?: boolean;
    /**
    * 其他属性,如aria-无障碍属性等
    */
    'props'?: {[prop: string]: any};
    /**
    * 设置按钮形状
    */
    'shape'?: 'circle' | 'round';
    /**
    * 设置按钮大小，可选值为 small large 或者不设
    */
    'size'?: Size;
    /**
    * a 链接的 target 属性，href 存在时生效
    */
    'target'?: string;
    /**
    * 按钮类型
    */
    'variant'?: BtnType;
  }
  interface MiCol extends JSXBase.HTMLAttributes<HTMLMiColElement> {
    /**
    * 栅格左侧的间隔格数，间隔内不可以有栅格
    */
    'offset'?: number;
    /**
    * 栅格顺序，flex 布局模式下有效
    */
    'order'?: string;
    /**
    * 其他属性,如aria-无障碍属性等
    */
    'props'?: {[prop: string]: any};
    /**
    * 栅格向左移动格数
    */
    'pull'?: number;
    /**
    * 栅格向右移动格数
    */
    'push'?: number;
    /**
    * 响应式栅格，可为栅格数或一个包含其他属性的对象
    */
    'response'?: ColAttrs;
    /**
    * 栅格占位格数，为 0 时相当于 display: none
    */
    'span'?: number;
  }
  interface MiIcon extends JSXBase.HTMLAttributes<HTMLMiIconElement> {
    /**
    * Icon 名，支持远程svg icon和自定义svg dom
    */
    'icon'?: string | HTMLElement;
    /**
    * 是否图标进入即将可视化区域后加载
    */
    'lazy'?: boolean;
    /**
    * 其他属性,如aria-无障碍属性等
    */
    'props'?: {[prop: string]: any};
    /**
    * 设置图标的旋转动画
    */
    'spinner'?: boolean;
    /**
    * 设置图标的类型
    */
    'theme'?: IconTheme;
  }
  interface MiPagination extends JSXBase.HTMLAttributes<HTMLMiPaginationElement> {
    /**
    * 页码改变的回调，参数是改变后的页码及每页条数
    */
    'change'?: Function;
    /**
    * 当前页数
    */
    'current'?: number;
    /**
    * 默认当前页数
    */
    'defaultCurrent'?: number;
    /**
    * 默认的每页条数
    */
    'defaultPageSize'?: number;
    /**
    * 禁用分页
    */
    'disabled'?: boolean;
    /**
    * 只有一页时是否隐藏分页器
    */
    'hideOnSinglePage'?: boolean;
    /**
    * 组件布局，子组件名用逗号分隔
    */
    'layout'?: string;
    /**
    * 每页条数
    */
    'pageSize'?: number;
    /**
    * 指定每页可以显示多少条
    */
    'pageSizeOptions'?: Array<number>;
    /**
    * 其他属性,如aria-无障碍属性等
    */
    'props'?: {[prop: string]: any};
    /**
    * 用于自定义页码的结构
    */
    'renderItem'?: Function;
    /**
    * 当添加该属性时，显示为简单分页
    */
    'simple'?: boolean;
    /**
    * size	当为「small」时，是小尺寸分页
    */
    'size'?: string;
    /**
    * 数据总数
    */
    'total'?: number;
  }
  interface MiParagraph extends JSXBase.HTMLAttributes<HTMLMiParagraphElement> {
    /**
    * 自动溢出省略
    */
    'ellipsis'?: boolean | Ellipsis;
    /**
    * 其他属性,如aria-无障碍属性等
    */
    'props'?: {[prop: string]: any};
  }
  interface MiRow extends JSXBase.HTMLAttributes<HTMLMiRowElement> {
    /**
    * 栅格间隔，可以写成像素值或支持响应式的对象写法 { xs: 8, sm: 16, md: 24}
    */
    'gutter'?: number | Gutter;
    /**
    * 其他属性,如aria-无障碍属性等
    */
    'props'?: {[prop: string]: any};
  }
  interface MiText extends JSXBase.HTMLAttributes<HTMLMiTextElement> {
    /**
    * 其他属性,如aria-无障碍属性等
    */
    'props'?: {[prop: string]: any};
    /**
    * 排版文字的主题
    */
    'theme'?: TypographyTheme;
  }
  interface MiTitle extends JSXBase.HTMLAttributes<HTMLMiTitleElement> {
    /**
    * 排版标题的级别
    */
    'lv'?: number;
    /**
    * 其他属性,如aria-无障碍属性等
    */
    'props'?: {[prop: string]: any};
  }
  interface MiTypography extends JSXBase.HTMLAttributes<HTMLMiTypographyElement> {
    /**
    * 排版文字的交互行为
    */
    'action'?: 'copyable' | 'editable';
    /**
    * 禁用文本
    */
    'disabled'?: boolean;
    /**
    * 其他属性,如aria-无障碍属性等
    */
    'props'?: {[prop: string]: any};
  }
  interface ResizeObserver extends JSXBase.HTMLAttributes<HTMLResizeObserverElement> {
    /**
    * 是否禁用
    */
    'disabled'?: boolean;
    /**
    * 重新计算元素宽高的回调
    */
    'resize'?: Function;
  }
  interface RippleEffect extends JSXBase.HTMLAttributes<HTMLRippleEffectElement> {
    /**
    * Sets the type of ripple-effect:  - `bounded`: the ripple effect expands from the user's click position - `unbounded`: the ripple effect expands from the center of the button and overflows the container.  NOTE: Surfaces for bounded ripples should have the overflow property set to hidden, while surfaces for unbounded ripples should have it set to visible.
    */
    'type'?: 'bounded' | 'unbounded';
  }

  interface IntrinsicElements {
    'mi-affix': MiAffix;
    'mi-breadcrumb': MiBreadcrumb;
    'mi-breadcrumb-item': MiBreadcrumbItem;
    'mi-button': MiButton;
    'mi-col': MiCol;
    'mi-icon': MiIcon;
    'mi-pagination': MiPagination;
    'mi-paragraph': MiParagraph;
    'mi-row': MiRow;
    'mi-text': MiText;
    'mi-title': MiTitle;
    'mi-typography': MiTypography;
    'resize-observer': ResizeObserver;
    'ripple-effect': RippleEffect;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements extends LocalJSX.IntrinsicElements {}
  }
}


